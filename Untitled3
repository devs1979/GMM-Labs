#include <bits/stdc++.h> 
#include <GLUT/glut.h>
#define PI 3.14159265358979323846
int width = 700, height = 700;
double rectangle[3][4], transformed_rectangle[3][4];
void drawAxes() {
    glColor3f(0.0, 0.0, 0.0); glBegin(GL_LINES); glVertex2f(-width/50, 0);glVertex2f(width/50, 0); glEnd();
    glBegin(GL_LINES); glVertex2f(0, -height/50); glVertex2f(0, height/50); glEnd();
}
void display(); void translate(double tx, double ty);
void scale(double sx, double sy); void shear(double shx, double shy);
void reflect(int opt); void rotate(double angle);
void drawRectangle(double rect[3][4]); void rectangleMatrix();
void transformRectangle();
void init() { glClearColor(1.0, 1.0, 1.0, 1.0); gluOrtho2D(-width/50, width/50, -height/50, height/50); }
int main(int argc, char **argv) {
    rectangleMatrix(); int option;
    printf("1. Translation\n"); printf("2. Scaling\n"); printf("3. Sheering\n"); printf("4. Reflection\n"); printf("5. Rotation\n"); 
    scanf("%d", &option);
    switch (option) {
        case 1: translate(1, 5); break;
        case 2: scale(2, 3); break;
        case 3: shear(3, 4); break;
        case 4: reflect(0); break;
        case 5: rotate(PI / 2); break;
        default: break;
    }
    glutInit(&argc, argv); glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); glutInitWindowSize(width, height);
    glutInitWindowPosition(0, 0); glutCreateWindow("Transformation"); glutDisplayFunc(display);
    init(); glutMainLoop();
    return 0;
}
void display() {
    glClear(GL_COLOR_BUFFER_BIT); drawAxes();
    glColor3f(1.0, 0.0, 0.0); drawRectangle(rectangle); glColor3f(0.0, 0.0, 1.0); drawRectangle(transformed_rectangle); glFlush();
}
void drawRectangle(double rect[3][4]) {
    glBegin(GL_LINE_LOOP);
    glVertex2f(rect[0][0], rect[1][0]); glVertex2f(rect[0][1], rect[1][1]); 
    glVertex2f(rect[0][2], rect[1][2]); glVertex2f(rect[0][3], rect[1][3]);
    glEnd();
}
void rectangleMatrix() {
    rectangle[0][0] = 0; rectangle[0][1] = 3; rectangle[0][2] = 3; rectangle[0][3] = 0; 
    rectangle[1][0] = 3; rectangle[1][1] = 3; rectangle[1][2] = 0; rectangle[1][3] = 0;
    rectangle[2][0] = 1; rectangle[2][1] = 1; rectangle[2][2] = 1; rectangle[2][3] = 1;
}
void transformRectangle() { for (int i=0;i<3;i++) for (int j=0;j<4;j++) transformed_rectangle[i][j] = rectangle[i][j]; }
void multiplyMatrix(double mat1[3][3], double mat2[3][4]) {
    double result[3][4];
    for (int i = 0; i < 3; i++) for (int j = 0; j < 4; j++) {
        result[i][j] = 0;
        for (int k = 0; k < 3; k++) result[i][j] += mat1[i][k] * mat2[k][j];
    }
    for (int i = 0; i < 3; i++) for (int j = 0; j < 4; j++) mat2[i][j] = result[i][j];
}
void translate(double tx, double ty) {
    rectangleMatrix();
    double translation_matrix[3][3] = { {1, 0, tx}, {0, 1, ty}, {0, 0, 1}};
    multiplyMatrix(translation_matrix, rectangle); transformRectangle(); rectangleMatrix();
}
void scale(double sx, double sy) {
    rectangleMatrix();
    double scale_matrix[3][3] = {{sx, 0, 0}, {0, sy, 0}, {0, 0, 1}};
    multiplyMatrix(scale_matrix, rectangle);
    transformRectangle(); rectangleMatrix();
}
void shear(double shx, double shy) {
    rectangleMatrix();
    double shear_matrix[3][3] = { {1, shx, 0}, {shy, 1, 0}, {0, 0, 1}};
    multiplyMatrix(shear_matrix, rectangle);
    transformRectangle(); rectangleMatrix();
}

void reflect(int opt) {
    rectangleMatrix();
    if (!opt) {
        double reflect_matrix[3][3] = { {1, 0, 0}, {0, -1, 0}, {0, 0, 1}};
        multiplyMatrix(reflect_matrix, rectangle);
    } else {
        double reflect_matrix[3][3] = { {-1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        multiplyMatrix(reflect_matrix, rectangle);
    }
    transformRectangle();
    rectangleMatrix();
}
void rotate(double angle) {
    rectangleMatrix();
    double rotate_matrix[3][3] = {{cos(angle), -sin(angle), 0}, {sin(angle), cos(angle), 0}, {0, 0, 1}};
    multiplyMatrix(rotate_matrix, rectangle); transformRectangle(); rectangleMatrix();
}
